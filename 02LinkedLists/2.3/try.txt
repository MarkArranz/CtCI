2.3 Implement an algorithm to delete a node in the middle of a singly linked list, given only access to that node.

EXAMPLE
Input: the node c from the linked list a->b->c->d->e
Result: nothing is returned, but the new linked list looks like a->b->d->e

REFERENCE
class Node {
    // "Pointer"
    Node next = null;
    public int Data { get; set; }

    public Node(int d) {
        data = d;
    }

    void appendToTail(int d) {
        // Create a new node to add to the end.
        Node end = new Node(d);

        // Starting at this node (beginning).
        Node n = this;
        // Iterate through the nodes until you find one without a "next" value.
        while (n.next != null) {
            n = n.next;
        }
        // Set the current "last" node to point to the new "last" node.
        n.next = end;
    }
}

TRY
public bool DeleteNode(Node node) {

    // Check for null

    if (node == null || node.next == null) {

    return false;

    }

    // Replace the current node's data with the next node's Data.

    node.Data = node.Next.Data;

    // Replace the current node's Next wsith the next node's Next pointer.

    node.Next = node.Next.Next;


    return true;

}