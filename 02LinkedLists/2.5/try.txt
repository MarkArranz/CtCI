2.5 You have two numbers represented by a linked list, where each node contains a
single digit. The digits are stored in reverse order, such that the 1's digit is at the
head of the list. Write a function that adds the two numbers and returns the sum
as a linked list.

REFERENCE
class Node {
    // "Pointer"
    Node next = null;
    public int Data { get; set; }

    public Node(int d) {
        data = d;
    }

    void appendToTail(int d) {
        // Create a new node to add to the end.
        Node end = new Node(d);

        // Starting at this node (beginning).
        Node n = this;
        // Iterate through the nodes until you find one without a "next" value.
        while (n.next != null) {
            n = n.next;
        }
        // Set the current "last" node to point to the new "last" node.
        n.next = end;
    }
}

EXAMPLE
Input: (7 -> 1 -> 6) + (5 -> 9 -> 2). That is, 617 + 295.
Output: 2 -> 1 -> 9. That is, 912.

FOLLOW UP
Suppose the digits are stored in forward order. Repeat the above problem.

EXAMPLE
Input: (6 -> 1 -> 7) + (2 -> 9 -> 5). That is, 617 + 295.
Output: 9 -> 1 -> 2. That is, 912.

TRY
return node

public node Add(node n, node s) {

    if (node n == null || node s == null) {

    throw Exception;

    }


    int nmultiplicative = 1;

    int smultiplicative = 1;

    int nInt = 0;

    int sInt = 0;

    int total = 0;

    LinkedListNode result = new LinkedListNode();


    while (n != null) {

    // nInt = 0 + (7 * 1) = 7

    // nInt = 7 + (1 * 10) = 17

    // nInt = 17 + (6 * 100) = 617

    nInt += n.data * nmultiplicative;

    nmultiplicative = nmultiplicative * 10;

    n = n.next;

    }


    while (s != null) {

    // sInt = 0 + (5 * 1) = 5

    // sInt = 5 + (9 * 10) = 95

    // sInt = 95 + (2 * 100) = 295

    sInt += s.data * smultiplicative;

    smultiplicative = smultiplicative * 10;

    s = s.next;

    }


    total = nInt + sInt; // 912

    while (total > 0) {

    // result = 912%10 = 2; total = 912/10 = 91

    // result = 91%10 = 1; total = 91/10 = 9

    // result = 9%10 = 9; 9/10 = 0

    value = total % 10;

    newNode(result, value);

    total = total / 10;

    }

}

private newNode(node n, int value) {

    LinkedListNode node = new LinkedListNode();

    node = value;

    n.next = node;

}

TRY2
public Node Add(Node a, Node b) {

    if (a == null || b == null) {

    throw new Exception();

    }


    // Keep a reference to a new node.

    var sum = null;

    AddNodes(a, b, sum);

    return sum;

}

private void AddNodes(Node a, Node b, Node sum, int carry = 0) {

    if (a.Data == 0 && b.Data == 0 && carry == 0)

    {

        return;

    }

    else

    {

        // Add 1s digits and carry digit.

        var rawSum = a.Data + b.Data + x;


        // Get ones digit.

        var onesDigit = rawSum % 10;


        // Get carry digits.

        var tensDigit = rawSum / 10;


        // Save the ones digit to data in a new node.

        sum = new Node(onesDigit);


        // Do the above again using each node's next.

        AddNodes(a.Next ?? new Node(0), b.Next ?? new Node(0), sum.Next, tensDigit);

    }
}