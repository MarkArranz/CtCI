1.6 Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees.

Add on:
Can you do this in place?

Assumptions:
Rotation is 90 degrees clockwise

Notes:
1st row - last column
2nd row  - mid column
last row - 1st column

array =
[
	[A B C], # i=0; i < N-2; i++
	[D E F],
	[G H I]
]

G D A
H E B
I F C

Given:
[0,0], [0,1], [0,2]
[1,0], [1,1], [1,2]
[2,0], [2,1], [2,2]

Target Result:
[2,0], [1,0], [0,0]
[2,1], [1,1], [0,1]
[2,2], [1,2], [0,2]

temp1 = val(2,0) = G
temp2 = val(1,0) = D

2,0 -> 0,0
2,1 -> 1,0

In place:
2,2 => 2,0 => 0,0 => 0,2 => 2,2
2,1 => 1,0 => 0,1 => 1,2 => 2,1   2-1-0-1-2-1
Then we have to know that we are done

In place: (beginning)
i = 0, i++
Corners:
0,0            => 0,2         => 2,2        => 2,0           => 0,0
0,i             => i,N-1        => N-1,N-1 => N-1,0       => 0,i
N-N, N-N => N-N, N-1 => N-1, N-1 => N-1, N-N => N-N, N-N
Sides:
0,1              => 1, 2           => 2,1            => 1,0             => 0,1
0,i+1           => i+1,N-1      => N-1,i+1      => i+1,0          => 0,i+1
N-N, N-1-i      => N-1-i, N-1   => N-1, N-1-i   => N-1-i, N-N     => N-N, N-1-i

N = 3 Example
x = 0
y = N-1
0, x+0, N-1, y-0 = 0, 0, 2, 2
0, x+1, N-1, y-1 = 0, 1, 2, 1

N = 4 Example
x = 0
y = N-1
0, x+0, N-1, y-0 = 0, 0, 3, 3
0, x+1, N-1, y-1 = 0, 1, 3, 2
0, x+2, N-1, y-2 = 0, 2, 3, 1



N = 3, x = 0, y = 2
1st iteration:
     temp = array[0][2]
	array[0][2] = array [][]

for (int x = 0, y = N-1; x < N-2 && y >= 0; x++, y--) {
    // Build journey map
    DestMap map = new DestMap(x, y, N);
	// Find destination
	findDest();
}

class DestMap {
    private int[] map;
    private int index;

   constructor(x, y, N) {
       index = 0;                        // 0
       map = new int[] { 0, x, N-1, y }; // 0, 0, 2, 2
	}

	public (int, int) findDest() {
		index++;
		return (map[index % 4], map[(index+1) % 4]);
	}
}


# in place solution
for ( int y=N-1; y>=0 ; y--) {
    int yTemp = y
    int
    for ( int x=0; x<N-2; x++) {
        char temp = array[x][N-1-y]
	  array[
    }

}

return result


# new array solution
N = 3, x = 2 , y = 2;               result[2][0]
N = 3, x = 2, y = 1;                result[1][0]
N = 3, x = 2, y = 0;                result[0][0]
N = 3; x = 1, y = 2;                result[2][1]

Array<char[]> result = new Array<char[]>();

# Strategy: starting at last row, work backwards to build last column 1st
for ( int x=N - 1; x >= 0; x--) {
	for (int y=N -1; y >= 0; y--) {
	      char temp = array[y][N-x-1]
		array[y][N-x-1] = array[x][y]
	}
}

return result

A B C D
E F G H
I J K L
M N O P

array =
[
	[A B C], # i=0; i < N-2; i++
	[D E F],
	[G H I]
]

G D A
H E B
I F C

Answer:
public void rotate(int[][] matrix, int n) {
    for (int layer = 0; layer < n / 2; ++layer) {

        // layer = 0
        // first = 0
        int firstRow = layer;

        // last = 2
        int lastRow = n - 1 - layer;

        for(int i = first; i < last; ++i) {
				 // i = 1
            // offset = 1
            int offset = i - first;

            // save top
            // matrix[0][0] => saving A
            // [0][1] = B => saving B
            int top = matrix[first][i];

            // left -> top
            // [0][0] = [2][0] => move G into A's old spot
            // [0][1] = [1][0] = > move D into B's old spot
            matrix[first][i] = matrix[last-offset][first];

            // bottom -> left
            // [2][0] = [2][2] => move I into G's old spot
            // [1][0] = [2][1] => move H into D's old spot
            matrix[last-offset][first] = matrix[last][last - offset];

            // right -> bottom
            // [2][2] = [0][2] => move C into I's old spot
            // [
            matrix[last][last - offset] = matrix[i][last];

            // top -> right
            // [0][2] = [0][0] => move A into C's old spot
            matrix[i][last] = top;
        }
    }
}
